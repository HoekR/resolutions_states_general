import os
import sys
import datetime
import logging


THIS_DIR = os.path.dirname(os.path.abspath(__file__))
SRC_FN = os.path.join(THIS_DIR,  'register.txt')
OUT_FN = os.path.join(THIS_DIR,  'register.xml')

LOGFILE = os.path.join(THIS_DIR, 'register.log')
logging.basicConfig(filename=LOGFILE,filemode='w', level=logging.INFO)

def read():
    #return a list of dictionaries representing an entry
    result = []
    prev_text = ''
    for l in open(SRC_FN).readlines():
        l = l.strip()
        #skip empty lines
        if not l:
            continue
        
        #parse the line
        #the line should be of the form TEXT, 1, 2, 3, 4-5, 6 e.v., 
        _pages = []
        text = []
        see_also = ''
        skip = False
        try:
            for x in l.split(','):
                x = x.strip()
                if x and x[0].isdigit():
                    #we have a page
                    _pages.append(x)
                else:
                    if not _pages:
                        text.append(x)
                    else:
                        raise Exception('A non page followed a page in %s' % l)
        except:
            e = sys.exc_info()[0]
            logging.info(e)
            
        text = ', '.join(text) 
        pages = []
        for page in _pages:
            try:
                if page.isdigit():
                    pages.append((page, int(page)))
                elif '-' in page:
                    page0 = page[:page.find('-')]
                    pages.append((page, int(page0)))
                elif page.endswith('e.v.'):
                    page0 = page[:page.find('e.v.')]
                    pages.append((page, int(page0)))
                elif page.endswith('.'):
                    page0 = page[:page.find('.')]
                    pages.append((page, int(page0)))
                else:
                    print l
                    print page
                    raise Exception('Did not recognize %s as a valid page reference' % page)
            except:
                logging.info("not included {page}".format(page=page))
        
        text = text.strip()
        if text.startswith('-'):
            text = prev_text + ', ' + text[1:].strip()
        elif text.startswith('zie'):
            text = prev_text + ', ' + text.strip()
        else:
            prev_text = text
        
#        print text, pages 
        try:
            if not pages:
                if 'zie ook' in text:
                    text, see_also = text.split('zie ook')
                elif 'zie' in text:
                    text, see_also = text.split('zie')
                elif 'passim' in text:
                    #no pagenumbers, but passim - that is fine
                    pass
                else:
                    #this is a header - i.e. something followed by -, ...
                    skip = True
        except ValueError, e:
            logging.info("%s: %s" % (text, e))
        if see_also:
            see_also = [x.strip() for x in see_also.split(',')] 
        print text, '---', see_also, '-', pages
        if not skip:
            result.append({
               'text':text,
               'pages':pages,
               'see_also':see_also,
               })
        
    return result
       

def print_to_xml(ls): 
    """create a TOC XML file for reading int he pagebrowser"""
    out_fn =  OUT_FN
    out_f  = open(out_fn, 'w')
    out_f.write('<?xml version="1.0" encoding="utf-8"?>\n')
    out_f.write('<index>\n')
    meta = 'generated by  http://dev.inghist.nl/svn/retro/import_scripts/archiefgids/convert.py on %s' % datetime.datetime.now()
    out_f.write('<meta>%s</meta>\n' % meta)
    for d in ls:
        out_f.write('<item>\n')
        out_f.write('<name>%(text)s</name>\n' % d)
        if d['see_also']:
            s = '<references>zie ook %s</references>' % (', '.join(['<see>%s</see>' % s for s in d['see_also']]))
            out_f.write(s)
        out_f.write('<references>\n')
        xx = ['\t<page number="%s">%s</page>' % (pagenumber, page.strip()) for page, pagenumber in d['pages']]
        out_f.write(', '.join(xx))
        out_f.write('</references>\n')
        out_f.write('</item>\n')
    out_f.write('</index>\n')
        
    print 'output written to', out_fn
    return out_fn
        

def doit():
    result = read()
    return print_to_xml(result)
if __name__ == '__main__':
    doit()
